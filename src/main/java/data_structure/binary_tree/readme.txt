基础的数据结构

https://github.com/wardseptember/notes/blob/master/docs/LeetCode/data_structure/binary_tree.md

二叉树遍历：需要同时掌握递归和非递归用法
前序遍历：先访问根节点，再前序遍历左子树，再前序遍历右子树
    非递归：用栈，栈加入跟节点，在循环中加入当前节点的值，再依次加入右子节点和左子节点，直到栈为空
中序遍历：先中序遍历左子树，再访问根节点，再中序遍历右子树
    非递归：用栈，直接进入循环（当前的node为空或栈为空），先遍历最左节点，然后层层向上回溯，再把右子节点加入栈中
后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根节点
    非递归：后序是先访问根节点，然后左子节点，再访问右子节点，依次压入栈； 从栈里取出时，是后序遍历的反序，需要翻转。
    这里利用Deque的性质，可每次插入到链头，相当于翻转。

DFS 深度搜索：
DFS 深度搜索-从上到下：其实就是前序遍历
DFS 深度搜索-从下向上（分治法）：也是前序遍历
DFS 深度搜索（从上到下） 和分治法区别：前者一般将最终结果通过指针参数传入，后者一般递归返回结果最后合并

BFS 层次遍历：
Queue+size

分治法应用：
先分别处理局部，再合并结果
适用场景
    快速排序
    归并排序
    二叉树相关问题
分治法模板
    递归返回条件
    分段处理
    合并结果

Solution104: 递归的简单运用
Solution110：在104题目的基础上多加一层递归
Solution235：直接使用dfs的特性，進階可以使用二叉搜索樹左邊的值比它小，右邊的值比它大的特性。詳細見我python版的SolutionOffer68_1
